@startuml modeloDelDominio

class "constants.Constants" {
  + {static} final int NIVEL_SUPERIOR
  + {static} final int NIVEL_INFERIOR
  + {static} final int CAPACIDAD_MAXIMA_ASCENSOR
  + {static} final int TOTAL_ASCENSORES
  + {static} final int PLANTA_PRINCIPAL
}

class "controllers.Consola" {
  + {static} void imprimir()
  + {static} void imprimir(Planta planta)
  + {static} void imprimir(SalaEspera salaEspera)
  + {static} void imprimir(Ascensor ascensor, int nivel)
  + {static} void imprimir(int numero)
  + {static} void imprimir(Tiempo tiempo)
  + {static} void imprimir(String texto)
}

class "controllers.Movimiento" {
  + {static} void mover(IMovible objetoMovible)
}

interface "interfaces.IMovible" {
  + void mover()
}

class "models.Persona" implements "interfaces.IMovible" {
    - Planta plantaActual
    - Planta plantaDestino
    - Tiempo tiempoEnDestino
    - boolean esperandoAscensor
    - boolean dentroAscensor
    + Persona()
    - Tiempo elegirTiempoEnDestino()
    - Planta elegirPlantaDestino()
    + void mover()
    + Planta getPlantaActual()
    + Planta getPlantaDestino()
    + boolean estadoEsperandoAscensor()
    + boolean estadoDentroAscensor()
    + void setPlantaActual(Planta plantaActual)
    + void setPlantaDestino(Planta plantaDestino)
    + void esperarAscensor()
    + void entrarAscensor()
    + void salirAscensor()
}

enum "structures.enums.EstadoAscensor" {
    SUBIENDO
    BAJANDO
    PARADO
}

class "models.Tiempo" {
    - int horas
    - int minutos
    - int segundos 
    - Universidad universidad
    + Tiempo()
    + Tiempo(int horas, int minutos, int segundos)
    + void incremenrtar()
    + void disminuir()
    + int getHoras()
    + int getMinutos()
    + int getSegundos()
    + Universidad getUniversidad()
    - void empezar()
    + {static} void main(String[] args)
}


class "models.Planta" implements "interfaces.IMovible" {
    - int nivel
    - ArrayList<Persona> personasEnPlanta
    - SalaEspera salaEspera
    + Planta(int nivel)
    + void agregarPersona(Persona persona)
    + void eliminarPersona(Persona persona)
    + void subirAAscensor(Ascensor ascensor)
    + void mover()
    + void llamadaAscensorMasCercano(ArrayList<Ascensor> ascensores)
    + int getNivel()
    + ArrayList<Persona> getPersonasEsperandoAscensor()
    + SalaEspera getSalaEspera()
    + void setNivel(int nivel)
    + int compareTo(Planta o)
}


class "models.Ascensor" implements "interfaces.IMovible" {
    - int idAscensor
    - int nivel
    - ArrayList<Planta> plantas
    - ArrayList<Persona> personas
    - EstadoAscensor estado
    + Ascensor(int idAscensor, ArrayList<Planta> plantas)
    + Planta getPlantaActual()
    + int getPersonasEnAscensor()
    + boolean estaVacio()
    + boolean estaLleno()
    + boolean estaSubiendo()
    + boolean estaBajando()
    + boolean estaParado() 
    + void agregarPersona(Persona persona)
    - void bajarPersonas()
    + void mover()
    + void llamar(persona persona)
    + void subir()
    + void bajar()
}


class "models.Universidad" implements "interfaces.IMovible" {
    - ArrayList<Planta> plantas
    - Map<int, Ascensor> ascensores
    + Universidad()
    + ArrayList<Planta> getPlantas()
    + Map<Integer,Ascensor> getAscensores()
    - void crearPlantas()
    # void configurarAscensores()
    + boolean llegoUnaPersona()
    + void mover()
}

class "models.SalaEspera" {
  - ArrayList<Persona> personas
  + SalaEspera()
  + void agregarPersona(Persona persona)
  + void eliminaPersona(Persona persona)
  + ArrayList<Persona> getPersonas()
  + int count()
}

class views.Renderizado {
  + {static} void renderizar()
}

Ascensor *--d Persona 
Ascensor *--d Planta 
Ascensor ---r "structures.enums.EstadoAscensor"
Universidad *-- Ascensor 
Universidad *-- Planta
Planta *--d Persona 
SalaEspera *--l Planta
Persona *---u Tiempo 
Tiempo *--d Universidad

@enduml