@startuml class
class Machine {
    - String name
    - List<Bill> bills
    - List<Coin> coins
    - List<Product> products
    - Scanner scanner

    + Machine(String name, List<Bill> bills, List<Coin> coins, List<Product> products)
    + addBill(Bill bill)
    + addCoin(Coin coin)
    + addProduct(Product product)
    + getBillList()
    + getCoinList()
    + getProductList()
    + showName()
    + calculateChange(double receivedAmount, double productAmount)
    + generateChangeMessage(double amount)
    + purchase()
    + showProducts()
    + selectProduct()
    + insertMoney()
    + printTicket(Product product, String changeMessage)
}

class Bill {
    + Bill(double value, int quantity)
}

class Coin {
    + Coin(double value, int quantity)
}

class Product {
    + String name
    + int price
    + int quantity

    + Product(String name, double price, int quantity)
    + updatePrice(double price)
    + updateName(String name)
    + updateQuantity(int quantity)
}

abstract class Money {
    + double value
    + int quantity

    + Money(double value, int quantity)
    + updateValue(double value)
    + updateQuantity(int quantity)
}

class Maintenance {
    + String name
    + String type

    + Maintenance()
}

class Initializer {
    + Initializer()

    + machines()
    + generateMachines(BillController, CoinController, ProductController)

}

class Manager {
    + String name
    + Scanner scanner

    + Manager(String name)
    + createBillList(int quantity1, int quantity2, int quantity3, int quantity4, int quantity5)
    + createCoinList(int quantity1, int quantity2, int quantity3)
    + createProductList()
    + printProducts(List<Machine> machines)
    + printMachineNames(List<Machine> machines)
    + selectMachine(List<Machine> machines)
    + purchaseMenu(List<Machine> machines)
}

class Main {
    + Main()
}

Initializer -u-o Main
Manager -u-* Initializer
Machine -u-* Manager
Machine *--r Maintenance
Machine o--- Product
Machine o--- Bill
Machine o--- Coin

Money <|--- Bill
Money <|--- Coin
@enduml
